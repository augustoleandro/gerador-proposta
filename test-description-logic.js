/**
 * Teste para verificar a l√≥gica de exibi√ß√£o da descri√ß√£o no template
 *
 * Este teste verifica se:
 * - Tabelas com ‚â§14 itens: descri√ß√£o na mesma p√°gina
 * - Tabelas com 15-16 itens: descri√ß√£o em p√°gina adicional
 * - Tabelas com >16 itens: descri√ß√£o em p√°gina adicional
 */

const { renderTemplate } = require("./lib/pdfUtils");

// Fun√ß√£o para criar dados de teste
function createTestData(itemCount, includeDescription = true) {
  const items = [];
  for (let i = 1; i <= itemCount; i++) {
    items.push({
      name: `Item de teste ${i}`,
      quantity: 1,
      value: 100.0,
    });
  }

  return {
    customer_name: "Cliente Teste",
    proposal_date: new Date().toISOString(),
    doc_revision: "01",
    project_type: "Teste de Automa√ß√£o",
    proposal_total_value: 10000.0,
    payment_condition: "30% entrada, 70% na instala√ß√£o",
    execution_time: "30 dias √∫teis",
    showItemValues: "true",
    orders: [
      {
        description: "Solu√ß√£o de Teste",
        value: 5000.0,
        service_description: includeDescription
          ? "Esta √© uma descri√ß√£o de teste para verificar se est√° sendo exibida corretamente; Inclui instala√ß√£o completa; Configura√ß√£o de todos os dispositivos; Treinamento dos usu√°rios; Suporte t√©cnico p√≥s-instala√ß√£o"
          : null,
        items: items,
      },
    ],
  };
}

// Fun√ß√£o para contar quantas vezes um texto aparece no HTML
function countOccurrences(html, searchText) {
  return (html.match(new RegExp(searchText, "g")) || []).length;
}

// Fun√ß√£o para verificar se existe uma p√°gina adicional
function hasAdditionalPage(html) {
  // Procura por "Detalhamento do Servi√ßo" ou "Servi√ßo Incluso" que indicam p√°gina adicional
  return (
    html.includes("Detalhamento do Servi√ßo") ||
    (html.includes("Servi√ßo Incluso") && html.includes("p√°gina adicional"))
  );
}

async function runTests() {
  console.log("üß™ Iniciando testes da l√≥gica de descri√ß√£o...\n");

  try {
    // Teste 1: Tabela com 10 itens (‚â§14) - descri√ß√£o na mesma p√°gina
    console.log("üìã Teste 1: Tabela com 10 itens (‚â§14 itens)");
    const data10 = createTestData(10, true);
    const html10 = await renderTemplate("proposal", data10);

    const descriptionInSamePage10 = html10.includes(
      "Servi√ßo (instala√ß√£o, configura√ß√£o e treinamento) da solu√ß√£o acima:"
    );
    const additionalPage10 = hasAdditionalPage(html10);

    console.log(
      `  ‚úì Descri√ß√£o na mesma p√°gina: ${
        descriptionInSamePage10 ? "‚úÖ SIM" : "‚ùå N√ÉO"
      }`
    );
    console.log(
      `  ‚úì P√°gina adicional criada: ${
        additionalPage10 ? "‚ùå SIM (n√£o deveria)" : "‚úÖ N√ÉO"
      }\n`
    );

    // Teste 2: Tabela com 15 itens - descri√ß√£o em p√°gina adicional
    console.log("üìã Teste 2: Tabela com 15 itens (15-16 itens)");
    const data15 = createTestData(15, true);
    const html15 = await renderTemplate("proposal", data15);

    const descriptionInSamePage15 = html15.includes(
      "Servi√ßo (instala√ß√£o, configura√ß√£o e treinamento) da solu√ß√£o acima:"
    );
    const additionalPage15 = hasAdditionalPage(html15);

    console.log(
      `  ‚úì Descri√ß√£o na mesma p√°gina: ${
        descriptionInSamePage15 ? "‚ùå SIM (n√£o deveria)" : "‚úÖ N√ÉO"
      }`
    );
    console.log(
      `  ‚úì P√°gina adicional criada: ${additionalPage15 ? "‚úÖ SIM" : "‚ùå N√ÉO"}\n`
    );

    // Teste 3: Tabela com 18 itens (>16) - descri√ß√£o em p√°gina adicional
    console.log("üìã Teste 3: Tabela com 18 itens (>16 itens)");
    const data18 = createTestData(18, true);
    const html18 = await renderTemplate("proposal", data18);

    const descriptionInSamePage18 = html18.includes(
      "Servi√ßo (instala√ß√£o, configura√ß√£o e treinamento) da solu√ß√£o acima:"
    );
    const additionalPage18 = hasAdditionalPage(html18);

    console.log(
      `  ‚úì Descri√ß√£o na mesma p√°gina: ${
        descriptionInSamePage18 ? "‚ùå SIM (n√£o deveria)" : "‚úÖ N√ÉO"
      }`
    );
    console.log(
      `  ‚úì P√°gina adicional criada: ${additionalPage18 ? "‚úÖ SIM" : "‚ùå N√ÉO"}\n`
    );

    // Teste 4: Tabela com 20 itens sem descri√ß√£o - deve mostrar texto padr√£o
    console.log("üìã Teste 4: Tabela com 20 itens sem descri√ß√£o personalizada");
    const data20NoDesc = createTestData(20, false);
    const html20NoDesc = await renderTemplate("proposal", data20NoDesc);

    const defaultServiceText = html20NoDesc.includes(
      "Instala√ß√£o, configura√ß√£o e treinamento</strong> da solu√ß√£o acima conforme especifica√ß√µes t√©cnicas"
    );
    const additionalPage20NoDesc = hasAdditionalPage(html20NoDesc);

    console.log(
      `  ‚úì Texto padr√£o exibido: ${defaultServiceText ? "‚úÖ SIM" : "‚ùå N√ÉO"}`
    );
    console.log(
      `  ‚úì P√°gina adicional criada: ${
        additionalPage20NoDesc ? "‚úÖ SIM" : "‚ùå N√ÉO"
      }\n`
    );

    // Teste 5: Verifica√ß√£o de m√∫ltiplas solu√ß√µes
    console.log("üìã Teste 5: M√∫ltiplas solu√ß√µes com diferentes quantidades");
    const dataMultiple = {
      customer_name: "Cliente Teste Multi",
      proposal_date: new Date().toISOString(),
      doc_revision: "01",
      project_type: "Teste Multi-Solu√ß√µes",
      proposal_total_value: 20000.0,
      payment_condition: "50% entrada, 50% na instala√ß√£o",
      execution_time: "45 dias √∫teis",
      showItemValues: "true",
      orders: [
        {
          description: "Solu√ß√£o Pequena (12 itens)",
          value: 5000.0,
          service_description:
            "Descri√ß√£o da solu√ß√£o pequena; Instala√ß√£o b√°sica; Configura√ß√£o simples",
          items: createTestData(12).orders[0].items,
        },
        {
          description: "Solu√ß√£o M√©dia (16 itens)",
          value: 8000.0,
          service_description:
            "Descri√ß√£o da solu√ß√£o m√©dia; Instala√ß√£o intermedi√°ria; Configura√ß√£o avan√ßada; Treinamento completo",
          items: createTestData(16).orders[0].items,
        },
        {
          description: "Solu√ß√£o Grande (25 itens)",
          value: 12000.0,
          service_description:
            "Descri√ß√£o da solu√ß√£o grande; Instala√ß√£o completa; Configura√ß√£o enterprise; Treinamento avan√ßado; Suporte estendido",
          items: createTestData(25).orders[0].items,
        },
      ],
    };

    const htmlMultiple = await renderTemplate("proposal", dataMultiple);

    // Contar quantas descri√ß√µes aparecem em p√°ginas da tabela vs p√°ginas adicionais
    const samePage = countOccurrences(
      htmlMultiple,
      "Servi√ßo \\(instala√ß√£o, configura√ß√£o e treinamento\\) da solu√ß√£o acima:"
    );
    const additionalPages =
      countOccurrences(htmlMultiple, "Detalhamento do Servi√ßo") +
      countOccurrences(htmlMultiple, "Servi√ßo Incluso");

    console.log(
      `  ‚úì Descri√ß√µes na mesma p√°gina: ${samePage} (esperado: 1 para solu√ß√£o com 12 itens)`
    );
    console.log(
      `  ‚úì Descri√ß√µes em p√°ginas adicionais: ${additionalPages} (esperado: 2 para solu√ß√µes com 16 e 25 itens)\n`
    );

    console.log("üéâ Testes conclu√≠dos!");
  } catch (error) {
    console.error("‚ùå Erro durante os testes:", error);
    console.error("Stack trace:", error.stack);
  }
}

// Executar os testes
runTests().catch(console.error);
